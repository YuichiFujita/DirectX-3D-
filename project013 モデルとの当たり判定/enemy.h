//======================================================================================================================
//
//	敵ヘッダー [enemy.h]
//	Author：藤田勇一
//
//======================================================================================================================
#ifndef _ENEMY_H_						// このマクロ定義がされていない場合
#define _ENEMY_H_						// 二重インクルード防止のマクロを定義する

//**********************************************************************************************************************
//	インクルードファイル
//**********************************************************************************************************************
#include "player.h"

//**********************************************************************************************************************
//	マクロ定義
//**********************************************************************************************************************
#define MAX_ENEMY			(128)		// 使用するモデル数 (敵の最大数)
#define TEXTURE_ENEMY_MAX	(10)		// テクスチャの最大数

#define DAMAGE_TIME_ENEMY	(10)		// ダメージ状態を保つ時間

//**********************************************************************************************************************
//	列挙型定義 (ENEMYSTATE)
//**********************************************************************************************************************
typedef enum
{
	ENEMYSTATE_NONE = 0,				// 何もしない状態
	ENEMYSTATE_NORMAL,					// 通常状態
	ENEMYSTATE_DAMAGE,					// ダメージ状態
	ENEMYSTATE_MAX,						// この列挙型の総数
} ENEMYSTATE;

//**********************************************************************************************************************
//	構造体定義 (ModelEnemy)
//**********************************************************************************************************************
typedef struct
{
	LPDIRECT3DTEXTURE9 apTexture[TEXTURE_ENEMY_MAX];		// テクスチャへのポインタ
	LPD3DXMESH         pMesh;								// メッシュ (頂点情報) へのポインタ
	LPD3DXBUFFER       pBuffMat;							// マテリアルへのポインタ
	DWORD              dwNumMat;							// マテリアルの数
	D3DXVECTOR3        vtxMin;								// 最小の頂点座標
	D3DXVECTOR3        vtxMax;								// 最大の頂点座標
}ModelEnemy;

//**********************************************************************************************************************
//	構造体定義 (Enemy)
//**********************************************************************************************************************
typedef struct
{
	D3DXVECTOR3 pos;					// 位置
	D3DXVECTOR3 rot;					// 向き
	D3DXMATRIX  mtxWorld;				// ワールドマトリックス
	ENEMYSTATE  state;					// 状態
	int         nType;					// 種類
	int         nCounterState;			// 状態管理カウンター
	int         nShadowID;				// 影のインデックス
	bool        bUse;					// 使用状況
}Enemy;

//**********************************************************************************************************************
//	プロトタイプ宣言
//**********************************************************************************************************************
void InitEnemy(void);										// 敵の初期化処理
void UninitEnemy(void);										// 敵の終了処理
void UpdateEnemy(void);										// 敵の更新処理
void DrawEnemy(void);										// 敵の描画処理
void SetEnemy(D3DXVECTOR3 pos, D3DXVECTOR3 rot, int nType);	// 敵の設定処理
void HitEnemy(Enemy *pEnemy);								// 敵のダメージ判定
Enemy *GetEnemy(void);										// 敵の取得処理
ModelEnemy *GetModelEnemy(void);							// 敵のモデル情報の取得処理

//**********************************************************************************************************************
//	プロトタイプ宣言 (デバッグ用)
//**********************************************************************************************************************
int GetNumEnemy(void);					// 敵の総数取得処理

#endif