//======================================================================================================================
//
//	ゲーム画面処理 [game.cpp]
//	Author：藤田勇一
//
//======================================================================================================================
//**********************************************************************************************************************
//	インクルードファイル
//**********************************************************************************************************************
#include "main.h"
#include "input.h"
#include "sound.h"
#include "fade.h"

#include "game.h"

#include "billboard.h"
#include "bullet.h"
#include "camera.h"
#include "effect.h"
#include "enemy.h"
#include "explosion.h"
#include "field.h"
#include "light.h"
#include "meshcylinder.h"
#include "meshfield.h"
#include "meshwall.h"
#include "object.h"
#include "particle.h"
#include "pause.h"
#include "player.h"
#include "shadow.h"
#include "wall.h"

//**********************************************************************************************************************
//	グローバル変数
//**********************************************************************************************************************
GAMESTATE g_gameState;			// ゲームの状態
int  g_nCounterGameState;		// 状態管理カウンター
bool g_bPause;					// ポーズ状態の ON / OFF

//======================================================================================================================
//	ゲーム画面の初期化処理
//======================================================================================================================
void InitGame(void)
{
	//------------------------------------------------------------------------------------------------------------------
	//	ゲームの初期化
	//------------------------------------------------------------------------------------------------------------------
	// グローバル変数を初期化
	g_gameState         = GAMESTATE_NORMAL;		// 通常状態に初期化
	g_nCounterGameState = 0;					// カウンターを初期化
	g_bPause            = false;				// ポーズを OFF にする

	//------------------------------------------------------------------------------------------------------------------
	//	使用するソースファイルの初期化
	//------------------------------------------------------------------------------------------------------------------
	// カメラの初期化
	InitCamera();

	// ライトの初期化
	InitLight();

	// メッシュシリンダーの初期化
	InitMeshCylinder();

#if 0
	// 床の初期化
	InitField();

	// 壁の初期化
	InitWall();
#else
	// メッシュフィールドの初期化
	InitMeshField();

	// メッシュウォールの初期化
	InitMeshWall();
#endif

	// 影の初期化
	InitShadow();

	// プレイヤーの初期化
	InitPlayer();

	// 敵の初期化
	InitEnemy();

	// オブジェクトの初期化
	InitObject();

	// ビルボードの初期化
	InitBillboard();

	// 弾の初期化
	InitBullet();

	// 爆発の初期化
	InitExplosion();

	// エフェクトの初期化
	InitEffect();

	// パーティクルの初期化
	InitParticle();

	// ポーズの初期化
	InitPause();

#if 0
	// 床の設定
	SetField(D3DXVECTOR3(-200.0f, 0.0f,  200.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f));
	SetField(D3DXVECTOR3( 200.0f, 0.0f,  200.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f));
	SetField(D3DXVECTOR3( 200.0f, 0.0f, -200.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f));
	SetField(D3DXVECTOR3(-200.0f, 0.0f, -200.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f));

	// 壁の設定
	SetWall(D3DXVECTOR3( 0.0f,   0.0f,  400.0f), D3DXVECTOR3(0.0f, D3DXToRadian(0),   0.0f));
	SetWall(D3DXVECTOR3( 400.0f, 0.0f,  0.0f),   D3DXVECTOR3(0.0f, D3DXToRadian(90),  0.0f));
	SetWall(D3DXVECTOR3( 0.0f,   0.0f, -400.0f), D3DXVECTOR3(0.0f, D3DXToRadian(180), 0.0f));
	SetWall(D3DXVECTOR3(-400.0f, 0.0f,  0.0f),   D3DXVECTOR3(0.0f, D3DXToRadian(270), 0.0f));
#else
	//// メッシュフィールドの設定
	//SetMeshField(D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f));

	//// メッシュウォールの設定
	//SetMeshWall(D3DXVECTOR3(0.0f, 0.0f, 400.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f));
#endif

	// 敵の設定
	SetEnemy(D3DXVECTOR3(-200.0f, 0.0f, 400.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 0);
	SetEnemy(D3DXVECTOR3(-100.0f, 0.0f, 400.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 0);
	SetEnemy(D3DXVECTOR3(   0.0f, 0.0f, 400.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 0);
	SetEnemy(D3DXVECTOR3( 100.0f, 0.0f, 400.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 0);
	SetEnemy(D3DXVECTOR3( 200.0f, 0.0f, 400.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 0);

	// オブジェクトの設定
	SetObject(D3DXVECTOR3(-100.0f, 0.0f, 0.0f),  D3DXVECTOR3(0.0f, 0.0f, 0.0f), 0);
	SetObject(D3DXVECTOR3(-160.0f, 0.0f, 0.0f),  D3DXVECTOR3(0.0f, 0.0f, 0.0f), 0);
	SetObject(D3DXVECTOR3(-100.0f, 0.0f, 60.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 0);
	SetObject(D3DXVECTOR3(-160.0f, 0.0f, 60.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 0);

	SetObject(D3DXVECTOR3(100.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 1);
	SetObject(D3DXVECTOR3(180.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), 2);

	// ビルボードの設定
	SetBillboard(D3DXVECTOR3( 400.0f, 50.0f, 0.0f));
	SetBillboard(D3DXVECTOR3(-400.0f, 50.0f, 0.0f));
}

//======================================================================================================================
//	ゲーム画面の終了処理
//======================================================================================================================
void UninitGame(void)
{
	//------------------------------------------------------------------------------------------------------------------
	//	使用するソースファイルの終了
	//------------------------------------------------------------------------------------------------------------------
	// カメラの終了
	UninitCamera();

	// ライトの終了
	UninitLight();

	// メッシュシリンダーの終了
	UninitMeshCylinder();

#if 0
	// 床の終了
	UninitField();

	// 壁の終了
	UninitWall();
#else
	// メッシュフィールドの終了
	UninitMeshField();

	// メッシュウォールの終了
	UninitMeshWall();
#endif

	// 影の終了
	UninitShadow();

	// プレイヤーの終了
	UninitPlayer();

	// 敵の終了
	UninitEnemy();

	// オブジェクトの終了
	UninitObject();

	// ビルボードの終了
	UninitBillboard();

	// 弾の終了
	UninitBullet();

	// 爆発の終了
	UninitExplosion();

	// エフェクトの終了
	UninitEffect();

	// パーティクルの終了
	UninitParticle();

	// ポーズの終了
	UninitPause();
}

//======================================================================================================================
//	ゲーム画面の更新処理
//======================================================================================================================
void UpdateGame(void)
{
	//------------------------------------------------------------------------------------------------------------------
	//	ゲームの更新
	//------------------------------------------------------------------------------------------------------------------
	switch (g_gameState)
	{ // 状態ごとの処理
	case GAMESTATE_NORMAL:

		if (GetFade() == FADE_NONE)
		{ // フェードしていない場合

			if (GetKeyboardTrigger(DIK_P) == true || GetJoyKeyTrigger(JOYKEY_START, 0) == true)
			{ // ポーズの操作が行われた場合

				// サウンドの再生
				//PlaySound(SOUND_LABEL_SE_DECISION_01);		// 決定音01 (システム)

				// ポーズの選択項目の再設定
				ResetPauseSelect();

				// 変数 (g_bPause) 真偽を代入する (三項演算子)	// 条件式が真なら true 、偽なら false を代入
				g_bPause = (g_bPause == false) ? true : false;	// ※ 条件式：() の中
			}
		}

#ifdef _DEBUG	// デバッグ処理
		if (GetKeyboardTrigger(DIK_F4) == true)
		{ // [F4] が押された場合

			// ゲーム画面を終了状態にする
			g_gameState = GAMESTATE_END;
		}
#endif

		// 処理を抜ける
		break;

	case GAMESTATE_END:

		// 変数 (g_nCounterGameState) を減算
		g_nCounterGameState--;

		if (g_nCounterGameState <= 0)
		{ // カウンターが 0以下になった場合

			// モード設定 (ゲーム画面に移行)
			SetFade(MODE_TITLE);
		}

		// 処理を抜ける
		break;
	}

	//------------------------------------------------------------------------------------------------------------------
	//	使用するソースファイルの更新
	//------------------------------------------------------------------------------------------------------------------
	if (g_bPause == false)
	{ // ポーズ状態ではない場合

		// ライトの更新
		UpdateLight();

		// メッシュシリンダーの更新
		UpdateMeshCylinder();

#if 0
		// 床の更新
		UpdateField();
	
		// 壁の更新
		UpdateWall();
#else
		// メッシュフィールドの更新
		UpdateMeshField();

		// メッシュウォールの更新
		UpdateMeshWall();
#endif
		// 影の更新
		UpdateShadow();

		// プレイヤーの更新
		UpdatePlayer();

		// 敵の更新
		UpdateEnemy();

		// オブジェクトの更新
		UpdateObject();

		// カメラの更新
		UpdateCamera();

		// ビルボードの更新
		UpdateBillboard();

		// 弾の更新
		UpdateBullet();

		// 爆発の更新
		UpdateExplosion();

		// エフェクトの更新
		UpdateEffect();

		// パーティクルの更新
		UpdateParticle();
	}
	else
	{ // ポーズ状態の場合

		// ポーズの更新
		UpdatePause();
	}
}

//======================================================================================================================
//	ゲーム画面の描画処理
//======================================================================================================================
void DrawGame(void)
{
	//------------------------------------------------------------------------------------------------------------------
	//	使用するソースファイルの描画
	//------------------------------------------------------------------------------------------------------------------
	// カメラの設定
	SetCamera();

	// メッシュシリンダーの描画
	DrawMeshCylinder();

#if 0
	// 床の描画
	DrawField();

	// 壁の描画
	DrawWall();
#else
	// メッシュフィールドの描画
	DrawMeshField();

	// メッシュウォールの描画
	DrawMeshWall();
#endif
	// 影の描画
	DrawShadow();

	// プレイヤーの描画
	DrawPlayer();

	// 敵の描画
	DrawEnemy();

	// オブジェクトの描画
	DrawObject();

	// ビルボードの描画
	DrawBillboard();

	// エフェクトの描画
	DrawEffect();

	// パーティクルの描画
	DrawParticle();

	// 弾の描画
	DrawBullet();

	// 爆発の描画
	DrawExplosion();

	if (g_bPause == true)
	{ // ポーズ状態の場合

		// ポーズの描画
		DrawPause();
	}
}

//======================================================================================================================
//	ゲーム画面の状態設定処理
//======================================================================================================================
void SetGameState(GAMESTATE state, int nCounter)
{
	// 変数 (g_gameState) に引数 (state) を代入
	g_gameState = state;				// 状態を設定

	// 変数 (g_nCounterGameState) に引数 (nCounter) を代入
	g_nCounterGameState = nCounter;		// 余韻の長さを設定
}

//======================================================================================================================
//	ポーズ状態の設定処理
//======================================================================================================================
void SetEnablePause(bool bPause)
{
	// 現在のポーズ状態に引数のポーズ状態を代入
	g_bPause = bPause;
}

//======================================================================================================================
//	ゲーム画面の状態取得処理
//======================================================================================================================
GAMESTATE GetGameState(void)
{
	// 変数 (g_gameState) の値を返す
	return g_gameState;
}

//======================================================================================================================
//	ポーズ状態の取得処理
//======================================================================================================================
bool GetPause(void)
{
	// ポーズ状態の真偽を返す
	return g_bPause;
}