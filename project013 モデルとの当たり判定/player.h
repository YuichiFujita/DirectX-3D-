//======================================================================================================================
//
//	プレイヤーヘッダー [player.h]
//	Author：藤田勇一
//
//======================================================================================================================
#ifndef _PLAYER_H_					// このマクロ定義がされていない場合
#define _PLAYER_H_					// 二重インクルード防止のマクロを定義する

//**********************************************************************************************************************
//	マクロ定義
//**********************************************************************************************************************
#define TEXTURE_PLAYER_MAX	(10)	// テクスチャの最大数
#define NONE_PLAYER_PARENT	(-1)	// プレイヤーの親の初期値 (親がいない場合)

#define PLAY_WIDTH			(15.0f)	// プレイヤーの横幅 / 2

//**********************************************************************************************************************
//	構造体定義 (Player)
//**********************************************************************************************************************
typedef struct
{
	LPDIRECT3DTEXTURE9 apTexture[TEXTURE_PLAYER_MAX];	// テクスチャへのポインタ
	LPD3DXMESH         pMesh;							// メッシュ (頂点情報) へのポインタ
	LPD3DXBUFFER       pBuffMat;						// マテリアルへのポインタ
	DWORD              dwNumMat;						// マテリアルの数
	D3DXVECTOR3        pos;								// 現在の位置
	D3DXVECTOR3        oldPos;							// 前回の位置
	D3DXVECTOR3        move;							// 移動量
	D3DXVECTOR3        rot;								// 向き
	D3DXMATRIX         mtxWorld;						// ワールドマトリックス
	int                nCameraBackCounter;				// カメラの回り込みカウンター
	int                nParentID;						// プレイヤーの親のインデックス
	int                nShadowID;						// 影のインデックス
}Player;

//**********************************************************************************************************************
//	プロトタイプ宣言
//**********************************************************************************************************************
void InitPlayer(void);				// プレイヤーの初期化処理
void UninitPlayer(void);			// プレイヤーの終了処理
void UpdatePlayer(void);			// プレイヤーの更新処理
void DrawPlayer(void);				// プレイヤーの描画処理
Player *GetPlayer(void);			// プレイヤーの取得処理

//**********************************************************************************************************************
//	プロトタイプ宣言 (デバッグ用)
//**********************************************************************************************************************
D3DXVECTOR3 GetPlayerPos(void);		// プレイヤーの座標の取得処理
D3DXVECTOR3 GetPlayerRot(void);		// プレイヤーの向きの取得処理
void ResetPlayer(void);				// プレイヤーの再設定処理

#endif